{"name": "test_sample01[123-123--]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 117\nCurrent browser version is 123.0.6312.87 with binary path /Applications/Google Chrome.app/Contents/MacOS/Google Chrome\nStacktrace:\n0   chromedriver                        0x0000000102d96d68 chromedriver + 4337000\n1   chromedriver                        0x0000000102d8ede4 chromedriver + 4304356\n2   chromedriver                        0x00000001029bba5c chromedriver + 293468\n3   chromedriver                        0x00000001029f1bd8 chromedriver + 515032\n4   chromedriver                        0x00000001029f0de0 chromedriver + 511456\n5   chromedriver                        0x00000001029ec300 chromedriver + 492288\n6   chromedriver                        0x00000001029e9798 chromedriver + 481176\n7   chromedriver                        0x0000000102a2be24 chromedriver + 753188\n8   chromedriver                        0x00000001029f4a5c chromedriver + 526940\n9   chromedriver                        0x00000001029f5908 chromedriver + 530696\n10  chromedriver                        0x0000000102d5cdb4 chromedriver + 4099508\n11  chromedriver                        0x0000000102d61270 chromedriver + 4117104\n12  chromedriver                        0x0000000102d674fc chromedriver + 4142332\n13  chromedriver                        0x0000000102d61d70 chromedriver + 4119920\n14  chromedriver                        0x0000000102d39a44 chromedriver + 3955268\n15  chromedriver                        0x0000000102d7ea18 chromedriver + 4237848\n16  chromedriver                        0x0000000102d7eb94 chromedriver + 4238228\n17  chromedriver                        0x0000000102d8ea5c chromedriver + 4303452\n18  libsystem_pthread.dylib             0x000000018734e034 _pthread_start + 136\n19  libsystem_pthread.dylib             0x0000000187348e3c thread_start + 8", "trace": ".0 = <list_iterator object at 0x1060539a0>\n\n>   kwargs = {arg: kwargs[arg] if arg in kwargs else request.getfixturevalue(arg) for arg in args}\n\n../../../Automation/lib/python3.11/site-packages/pytest_bdd/scenario.py:204: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../../../Automation/lib/python3.11/site-packages/_pytest/fixtures.py:541: in getfixturevalue\n    fixturedef = self._get_active_fixturedef(argname)\n../../../Automation/lib/python3.11/site-packages/_pytest/fixtures.py:570: in _get_active_fixturedef\n    self._compute_fixture_value(fixturedef)\n../../../Automation/lib/python3.11/site-packages/_pytest/fixtures.py:647: in _compute_fixture_value\n    fixturedef.execute(request=subrequest)\n../../../Automation/lib/python3.11/site-packages/_pytest/fixtures.py:1079: in execute\n    result = ihook.pytest_fixture_setup(fixturedef=self, request=request)\n../../../Automation/lib/python3.11/site-packages/pluggy/_hooks.py:501: in __call__\n    return self._hookexec(self.name, self._hookimpls.copy(), kwargs, firstresult)\n../../../Automation/lib/python3.11/site-packages/pluggy/_manager.py:119: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n../../../Automation/lib/python3.11/site-packages/_pytest/setuponly.py:36: in pytest_fixture_setup\n    return (yield)\n../../../Automation/lib/python3.11/site-packages/_pytest/fixtures.py:1132: in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n../../../Automation/lib/python3.11/site-packages/_pytest/fixtures.py:906: in call_fixture_func\n    fixture_result = next(generator)\nsteps/conftest.py:30: in init_driver\n    driver = webdriver.Chrome(service=service,options=options)\n../../../Automation/lib/python3.11/site-packages/selenium/webdriver/chrome/webdriver.py:45: in __init__\n    super().__init__(\n../../../Automation/lib/python3.11/site-packages/selenium/webdriver/chromium/webdriver.py:61: in __init__\n    super().__init__(command_executor=executor, options=options)\n../../../Automation/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:208: in __init__\n    self.start_session(capabilities)\n../../../Automation/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../../../Automation/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x106045390>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...00018734e034 _pthread_start + 136\\\\n19  libsystem_pthread.dylib             0x0000000187348e3c thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 117\nE       Current browser version is 123.0.6312.87 with binary path /Applications/Google Chrome.app/Contents/MacOS/Google Chrome\nE       Stacktrace:\nE       0   chromedriver                        0x0000000102d96d68 chromedriver + 4337000\nE       1   chromedriver                        0x0000000102d8ede4 chromedriver + 4304356\nE       2   chromedriver                        0x00000001029bba5c chromedriver + 293468\nE       3   chromedriver                        0x00000001029f1bd8 chromedriver + 515032\nE       4   chromedriver                        0x00000001029f0de0 chromedriver + 511456\nE       5   chromedriver                        0x00000001029ec300 chromedriver + 492288\nE       6   chromedriver                        0x00000001029e9798 chromedriver + 481176\nE       7   chromedriver                        0x0000000102a2be24 chromedriver + 753188\nE       8   chromedriver                        0x00000001029f4a5c chromedriver + 526940\nE       9   chromedriver                        0x00000001029f5908 chromedriver + 530696\nE       10  chromedriver                        0x0000000102d5cdb4 chromedriver + 4099508\nE       11  chromedriver                        0x0000000102d61270 chromedriver + 4117104\nE       12  chromedriver                        0x0000000102d674fc chromedriver + 4142332\nE       13  chromedriver                        0x0000000102d61d70 chromedriver + 4119920\nE       14  chromedriver                        0x0000000102d39a44 chromedriver + 3955268\nE       15  chromedriver                        0x0000000102d7ea18 chromedriver + 4237848\nE       16  chromedriver                        0x0000000102d7eb94 chromedriver + 4238228\nE       17  chromedriver                        0x0000000102d8ea5c chromedriver + 4303452\nE       18  libsystem_pthread.dylib             0x000000018734e034 _pthread_start + 136\nE       19  libsystem_pthread.dylib             0x0000000187348e3c thread_start + 8\n\n../../../Automation/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: SessionNotCreatedException"}, "description": "../features/sample.feature: Verify the login functionality", "parameters": [{"name": "_pytest_bdd_example", "value": "{'Username': '123', 'Password': '123'}"}, {"name": "Username", "value": "''"}, {"name": "Password", "value": "''"}], "start": 1711773956520, "stop": 1711773964347, "uuid": "2876ce1e-a76c-4c89-8d4a-e223e2f1c47d", "historyId": "aa800b01451927b0f97456ee7ee977c5", "testCaseId": "8781a52a01f4bb11b862418b60a465e1", "fullName": "steps.test_sample#test_sample01", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('Username', 'Password')"}, {"name": "tag", "value": "sample01"}, {"name": "parentSuite", "value": "steps"}, {"name": "suite", "value": "test_sample"}, {"name": "host", "value": "Saravanas-MacBook-Air.local"}, {"name": "thread", "value": "2267-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "steps.test_sample"}]}