{"name": "test_TC01_Automation[123-123-QA--]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a rel=\"nofollow\" href=\"/shop/?add-to-cart=160\" data-quantity=\"1\" data-product_id=\"160\" data-product_sku=\"\" class=\"button product_type_simple add_to_cart_button ajax_add_to_cart\">...</a> is not clickable at point (484, 653). Other element would receive the click: <iframe id=\"aswift_8\" name=\"aswift_8\" style=\"width: 728px !important; height: 90px !important; display: block; margin: 0px auto;\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" width=\"728\" height=\"90\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" src=\"https://googleads.g.doubleclick.net/pagead/html/r20240506/r20110914/zrt_lookup_fy2021.html#RS-0-&amp;adk=1812271801&amp;client=ca-pub-9173866185064071&amp;fa=1&amp;ifi=9&amp;uci=a!9&amp;btvi=7\" data-google-container-id=\"a!9\" tabindex=\"0\" title=\"Advertisement\" aria-label=\"Advertisement\" data-google-query-id=\"CNf2xMn-_IUDFcUggwMdTCYA3A\" data-load-complete=\"true\"></iframe>\n  (Session info: chrome=124.0.6367.119)\nStacktrace:\n0   chromedriver                        0x000000010335c128 chromedriver + 4596008\n1   chromedriver                        0x0000000103353e93 chromedriver + 4562579\n2   chromedriver                        0x0000000102f5739a chromedriver + 381850\n3   chromedriver                        0x0000000102fa8181 chromedriver + 713089\n4   chromedriver                        0x0000000102fa6093 chromedriver + 704659\n5   chromedriver                        0x0000000102fa36f7 chromedriver + 694007\n6   chromedriver                        0x0000000102fa2a9c chromedriver + 690844\n7   chromedriver                        0x0000000102f9590c chromedriver + 637196\n8   chromedriver                        0x0000000102fc3142 chromedriver + 823618\n9   chromedriver                        0x0000000102f952b8 chromedriver + 635576\n10  chromedriver                        0x0000000102fc32fe chromedriver + 824062\n11  chromedriver                        0x0000000102fe314d chromedriver + 954701\n12  chromedriver                        0x0000000102fc2ee3 chromedriver + 823011\n13  chromedriver                        0x0000000102f93be4 chromedriver + 629732\n14  chromedriver                        0x0000000102f9479e chromedriver + 632734\n15  chromedriver                        0x0000000103322042 chromedriver + 4358210\n16  chromedriver                        0x0000000103326c8d chromedriver + 4377741\n17  chromedriver                        0x0000000103326603 chromedriver + 4376067\n18  chromedriver                        0x0000000103326f35 chromedriver + 4378421\n19  chromedriver                        0x000000010330ba65 chromedriver + 4266597\n20  chromedriver                        0x00000001033272bd chromedriver + 4379325\n21  chromedriver                        0x00000001032fe0b0 chromedriver + 4210864\n22  chromedriver                        0x0000000103344af8 chromedriver + 4500216\n23  chromedriver                        0x0000000103344c71 chromedriver + 4500593\n24  chromedriver                        0x0000000103353ad3 chromedriver + 4561619\n25  libsystem_pthread.dylib             0x00007ff80722818b _pthread_start + 99\n26  libsystem_pthread.dylib             0x00007ff807223ae3 thread_start + 15", "trace": "fixturefunc = <function step_impl at 0x106a88220>, request = <FixtureRequest for <Function test_TC01_Automation[123-123-QA--]>>\nkwargs = {'init_driver': <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1dda9aab0f2280079c29131d1fea0041\")>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../Automation/lib/python3.11/site-packages/_pytest/fixtures.py:913: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsteps/test_AutomationPractise.py:28: in step_impl\n    AP.AddSeleniumRuby()\npages/AutomationPractise.py:33: in AddSeleniumRuby\n    self.driver.find_element(by=By.XPATH, value = self.SeleniumRubyProduct).click()\n../../../Automation/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n../../../Automation/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n../../../Automation/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10485b1d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...7ff80722818b _pthread_start + 99\\\\n26  libsystem_pthread.dylib             0x00007ff807223ae3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a rel=\"nofollow\" href=\"/shop/?add-to-cart=160\" data-quantity=\"1\" data-product_id=\"160\" data-product_sku=\"\" class=\"button product_type_simple add_to_cart_button ajax_add_to_cart\">...</a> is not clickable at point (484, 653). Other element would receive the click: <iframe id=\"aswift_8\" name=\"aswift_8\" style=\"width: 728px !important; height: 90px !important; display: block; margin: 0px auto;\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" width=\"728\" height=\"90\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" src=\"https://googleads.g.doubleclick.net/pagead/html/r20240506/r20110914/zrt_lookup_fy2021.html#RS-0-&amp;adk=1812271801&amp;client=ca-pub-9173866185064071&amp;fa=1&amp;ifi=9&amp;uci=a!9&amp;btvi=7\" data-google-container-id=\"a!9\" tabindex=\"0\" title=\"Advertisement\" aria-label=\"Advertisement\" data-google-query-id=\"CNf2xMn-_IUDFcUggwMdTCYA3A\" data-load-complete=\"true\"></iframe>\nE         (Session info: chrome=124.0.6367.119)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010335c128 chromedriver + 4596008\nE       1   chromedriver                        0x0000000103353e93 chromedriver + 4562579\nE       2   chromedriver                        0x0000000102f5739a chromedriver + 381850\nE       3   chromedriver                        0x0000000102fa8181 chromedriver + 713089\nE       4   chromedriver                        0x0000000102fa6093 chromedriver + 704659\nE       5   chromedriver                        0x0000000102fa36f7 chromedriver + 694007\nE       6   chromedriver                        0x0000000102fa2a9c chromedriver + 690844\nE       7   chromedriver                        0x0000000102f9590c chromedriver + 637196\nE       8   chromedriver                        0x0000000102fc3142 chromedriver + 823618\nE       9   chromedriver                        0x0000000102f952b8 chromedriver + 635576\nE       10  chromedriver                        0x0000000102fc32fe chromedriver + 824062\nE       11  chromedriver                        0x0000000102fe314d chromedriver + 954701\nE       12  chromedriver                        0x0000000102fc2ee3 chromedriver + 823011\nE       13  chromedriver                        0x0000000102f93be4 chromedriver + 629732\nE       14  chromedriver                        0x0000000102f9479e chromedriver + 632734\nE       15  chromedriver                        0x0000000103322042 chromedriver + 4358210\nE       16  chromedriver                        0x0000000103326c8d chromedriver + 4377741\nE       17  chromedriver                        0x0000000103326603 chromedriver + 4376067\nE       18  chromedriver                        0x0000000103326f35 chromedriver + 4378421\nE       19  chromedriver                        0x000000010330ba65 chromedriver + 4266597\nE       20  chromedriver                        0x00000001033272bd chromedriver + 4379325\nE       21  chromedriver                        0x00000001032fe0b0 chromedriver + 4210864\nE       22  chromedriver                        0x0000000103344af8 chromedriver + 4500216\nE       23  chromedriver                        0x0000000103344c71 chromedriver + 4500593\nE       24  chromedriver                        0x0000000103353ad3 chromedriver + 4561619\nE       25  libsystem_pthread.dylib             0x00007ff80722818b _pthread_start + 99\nE       26  libsystem_pthread.dylib             0x00007ff807223ae3 thread_start + 15\n\n../../../Automation/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:229: ElementClickInterceptedException"}, "description": "../features/AutomationPractise.feature: Verify the User is able to add the products in QA environment", "attachments": [{"name": "HomemenuCLick", "source": "c86d3be2-e4e3-4917-b1ab-165a2c54149d-attachment.png", "type": "image/png"}], "parameters": [{"name": "_pytest_bdd_example", "value": "{'Username': '123', 'Password': '123', 'env': 'QA'}"}, {"name": "Username", "value": "''"}, {"name": "Password", "value": "''"}], "start": 1715134635455, "stop": 1715134697456, "uuid": "5abe9186-c0d5-4e8a-80d9-06fda55bb740", "historyId": "568921c7cf2aa74c9e54589f010624f5", "testCaseId": "cfd181863037272bc7e3c4eef4a29f8c", "fullName": "steps.test_AutomationPractise#test_TC01_Automation", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('Username', 'Password')"}, {"name": "tag", "value": "TC01_Automation"}, {"name": "parentSuite", "value": "steps"}, {"name": "suite", "value": "test_AutomationPractise"}, {"name": "host", "value": "Saravanas-MacBook-Air.local"}, {"name": "thread", "value": "1625-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "steps.test_AutomationPractise"}]}