{"name": "test_TC02_Automation[123-123-QA--]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "fixturefunc = <function step_impl at 0x102bec860>, request = <FixtureRequest for <Function test_TC02_Automation[123-123-QA--]>>\nkwargs = {'init_driver': <selenium.webdriver.chrome.webdriver.WebDriver (session=\"eb2d4426b8eeaf4d009abd1acbe40f7d\")>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n../../../Automation/lib/python3.11/site-packages/_pytest/fixtures.py:913: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nsteps/test_AutomationPractise.py:46: in step_impl\n    AP.CallAPIs()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.AutomationPractise.AutomationPractise object at 0x102bf5b50>\n\n    def CallAPIs(self):\n        response = requests.get('http://216.10.245.166/Library/GetBook.php',\n             params={'AuthorName':'Rahul Shetty'},)\n        # print(response.text)\n        # print(type(response.text))\n        # dict_response = json.loads(response.text)\n        # print(dict_response[0]['isbn'])\n        json_response = response.json()\n        print(json_response)\n        print(type(json_response))\n        print(json_response[0]['isbn'])\n        assert response.status_code == 200\n        print(response.headers)\n        assert response.headers['Content-Type'] == 'application/json;charset=UTF-8'\n        # Retrieve the book details with ISBN RGHCC\n        for actualBook in json_response:\n            if actualBook['isbn'] == 'RGHCC':\n                print(actualBook)\n                break\n    \n        expectedBook = {\n                \"book_name\": \"Learn API Automation with RestAssured\",\n                \"isbn\": \"RGHCC\",\n                \"aisle\": \"12239\"\n            }\n    \n>       assert actualBook == expectedBook\nE       AssertionError\n\npages/AutomationPractise.py:82: AssertionError"}, "description": "../features/AutomationPractise.feature: Verify the User is able to Call APIs and parsing", "parameters": [{"name": "_pytest_bdd_example", "value": "{'Username': '123', 'Password': '123', 'env': 'QA'}"}, {"name": "Username", "value": "''"}, {"name": "Password", "value": "''"}], "start": 1715134420738, "stop": 1715134428445, "uuid": "4b7ef625-f6c9-4e30-861e-067790e38469", "historyId": "633326525944ec4a77fb179c04c56fe2", "testCaseId": "03091fa1edc1d2b5d2897e07d78809c1", "fullName": "steps.test_AutomationPractise#test_TC02_Automation", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('Username', 'Password')"}, {"name": "tag", "value": "TC02_Automation"}, {"name": "parentSuite", "value": "steps"}, {"name": "suite", "value": "test_AutomationPractise"}, {"name": "host", "value": "Saravanas-MacBook-Air.local"}, {"name": "thread", "value": "1507-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "steps.test_AutomationPractise"}]}